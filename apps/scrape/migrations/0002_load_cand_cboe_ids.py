# Generated by Django 2.1.7 on 2019-02-24 00:06
import requests
from django.db import migrations


### START CONFIG ###
scrape_target = 'https://chicagoelections.com/results/ap/summary.txt'
data_line_range_start, data_line_range_end = 3, 182
race_code_range_start, race_code_range_end = 0, 4
cand_code_range_start, cand_code_range_end = 4, 7
race_name_range_start, race_name_range_end = 32, 87
cand_name_range_start, cand_name_range_end = 88, 126
### END CONFIG ###


def load_cand_cboe_ids(apps, schema_editor):
    '''
    Add cboe_results_id for candidates based on race and last name
    '''
    # import ipdb
    # ipdb.set_trace()
    from django.core.exceptions import ObjectDoesNotExist

    Race = apps.get_model('races', 'Race')

    page = get_page().decode()
    data = page.splitlines()[data_line_range_start:data_line_range_end]

    for datum in data:
        # get race object
        race_code = get_race_code(datum)

        try:
            race_obj = Race.objects.get(cboe_results_id=race_code)
        except ObjectDoesNotExist:
            # once the race codes stop matching, we're done
            break

        # get candidate data
        cand_code = get_cand_code(datum)
        cand_name = get_cand_name(datum)

        cand = lookup_our_cand(cand_name, race_obj)
        if (cand):
            cand.cboe_results_id = cand_code
            cand.save()


def get_page():
    return requests.get(scrape_target).content


def get_race_code(line):
    race_code = line[race_code_range_start:race_code_range_end]
    return race_code


def get_cand_code(line):
    return line[cand_code_range_start:cand_code_range_end]


def get_cand_name(line):
    return line[cand_name_range_start:cand_name_range_end].strip()


def lookup_our_cand(cboe_name, race_obj):
    from django.core.exceptions import ObjectDoesNotExist

    cand_obj = None

    try:
        cboe_first_name = cboe_name.split(' ')[0]
        cand_obj = race_obj.candidates.get(
            first_name__icontains=cboe_first_name)
    except ObjectDoesNotExist:
        try:
            cboe_last_name = cboe_name.split(' ')[-1]
            cand_obj = race_obj.candidates.get(
                last_name__icontains=cboe_last_name)
        except ObjectDoesNotExist:
            print(
                f'\nCould not identify {cboe_name} {race_obj}')

    return cand_obj


class Migration(migrations.Migration):

    dependencies = [
        ('scrape', '0001_load_race_cboe_ids'),
    ]

    operations = [
        migrations.RunPython(load_cand_cboe_ids,
                             reverse_code=migrations.RunPython.noop),
    ]
